users:
  - name: ${ssh_user_name}
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    ssh_authorized_keys:
      - ${ssh_public_key}

package_update: true
packages:
  - wireguard
  - iproute2
  - iptables-persistent
  - netfilter-persistent

write_files:
  - content: |
      [Unit]
      Description=Restart WireGuard
      After=network.target
      [Service]
      Type=oneshot
      ExecStart=/usr/bin/systemctl restart wg-quick@wg0.service
      [Install]
      RequiredBy=wgui.path
    path: /etc/systemd/system/wgui.service
    permissions: "0400"
    owner: root:root
  - content: |
      [Unit]
      Description=Watch /etc/wireguard/wg0.conf for changes
      [Path]
      PathModified=/etc/wireguard/wg0.conf
      [Install]
      WantedBy=multi-user.target
    path: /etc/systemd/system/wgui.path
    permissions: "0400"
    owner: root:root
  - content: |
      [Unit]
      Description=wgui server.
      After=network.target
      Wants=network-online.target systemd-networkd-wait-online.service

      [Service]
      ExecStart=/opt/wireguard-ui
      Restart=on-abnormal
      User=root
      Group=root
      WorkingDirectory=/var/lib/wireguard-ui
      Environment="WGUI_PASSWORD_FILE=/var/lib/wireguard-ui/initial_password"
      Environment="WGUI_LOG_LEVEL=DEBUG"

      [Install]
      WantedBy=multi-user.target
    path: /etc/systemd/system/wgui_server.service
    permissions: "0400"
    owner: root:root
  - content: |
      [Unit]
      Description=Configure tunl0 interface
      After=network-online.target
      Wants=network-online.target
      
      [Service]
      Type=oneshot
      ExecStartPre=/sbin/modprobe ipip
      ExecStart=/bin/bash -c 'ip link set tunl0 up'
      ExecStartPost=/bin/bash -c 'ip addr replace 10.0.0.1/24 dev tunl0'
      RemainAfterExit=yes
      
      [Install]
      WantedBy=multi-user.target
    path: /etc/systemd/system/tunl0.service
    permissions: "0400"
    owner: root:root
#  - content: |
#      #!/bin/bash
#      set -e
#      ip link set tunl0 up
#      ip addr flush dev tunl0
#      ip addr add 10.0.0.1/24 dev tunl0
#    path: /usr/local/bin/configure_tunl0.sh
#    permissions: "0400"
#    owner: root:root

runcmd:
  # Creating keys
  - wg genkey | sudo tee /etc/wireguard/private.key
  - sudo chmod go= /etc/wireguard/private.key
  - sudo cat /etc/wireguard/private.key | wg pubkey | sudo tee /etc/wireguard/public.key

  # Creating wg0.conf file
  - export PRIVATE_KEY=$(sudo cat /etc/wireguard/private.key)
  - export INTERFACE=$(ip route list default | awk '{for(i=1;i<=NF;i++) if($i=="dev") print $(i+1)}')
  - |
    sudo tee /etc/wireguard/wg0.conf <<EOF
    [Interface]
    PrivateKey = $PRIVATE_KEY
    Address = 10.8.0.1/24
    ListenPort = 51820
    SaveConfig = true

    PostUp = ufw route allow in on wg0 out on $INTERFACE
    PostUp = iptables -t nat -I POSTROUTING -o $INTERFACE -j MASQUERADE
    PostUp = ip6tables -t nat -I POSTROUTING -o $INTERFACE -j MASQUERADE
    PreDown = ufw route delete allow in on wg0 out on $INTERFACE
    PreDown = iptables -t nat -D POSTROUTING -o $INTERFACE -j MASQUERADE
    PreDown = ip6tables -t nat -D POSTROUTING -o $INTERFACE -j MASQUERADE
    EOF

  # Configuring network
  - |
    sudo tee -a /etc/sysctl.conf <<EOF
    net.ipv4.ip_forward=1
    net.ipv6.conf.all.forwarding=1
    EOF
  - sudo sysctl -p

  # Configuring firewall
  - sudo ufw allow 51820/udp
  - sudo ufw allow 5000/tcp
  - sudo ufw allow OpenSSH
  - sudo ufw disable
  - sudo ufw enable

  # Starting WireGuard
  - sudo systemctl enable wg-quick@wg0.service
  - sudo systemctl start wg-quick@wg0.service

  # Preparing wireguard-ui
  - sudo mkdir -p /var/lib/wireguard-ui
  - tr -dc A-Za-z0-9 </dev/urandom | head -c 24 | sudo tee /var/lib/wireguard-ui/initial_password
  - |
    until curl -LO https://storage.ai.nebius.cloud/yc-marketplace-preprod-distr/wireguard-ui; do
    echo "Download failed. Retrying in 5 seconds..."
    sleep 5
    done
  - sudo mv ./wireguard-ui /opt/wireguard-ui
  - sudo chmod +x /opt/wireguard-ui
  - sudo systemctl daemon-reload
  - sudo systemctl enable wgui.path
  - sudo systemctl enable wgui.service
  - sudo systemctl start wgui.path
  - sudo systemctl start wgui.service
  - sudo systemctl enable wgui_server.service
  - sudo systemctl start wgui_server.service

  # Preparing IPIP Gateway
  # Iptables Rules
  - sudo modprobe ipip
  - sudo iptables -A INPUT -p 4 -j ACCEPT
  - sudo iptables -A OUTPUT -p 4 -j ACCEPT
  - sudo iptables -A FORWARD -p 4 -j ACCEPT
  - sudo iptables -t nat -A POSTROUTING -o $INTERFACE -j MASQUERADE
  - sudo iptables -A FORWARD -i tunl0 -o $INTERFACE -j ACCEPT
  - sudo iptables -A FORWARD -i $INTERFACE -o tunl0 -m state --state RELATED,ESTABLISHED -j ACCEPT
  - sudo netfilter-persistent save
  - sudo systemctl start tunl0.service
  - sudo systemctl enable tunl0.service


bootcmd:
  - sudo systemctl restart wgui_server.service
  - sudo modprobe ipip

